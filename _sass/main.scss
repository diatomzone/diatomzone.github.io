// sass that will be converted/imported into the built site's CSS hub styles.scss

// SET SCSS VARIABLES /////////////////////////////////////////////////////////////////////////////
// $relativeurl: "/baseurl"; // for when it unfortunately needs to be hardcoded
$gapheight: 30px; // spacing between main layout elements
$boxpadding: 20px; // padding for containers
$elementmargin: 30px; // spacing for contained elements, ex: h1 or p

$colorbg: rgb(26,28,43);
$colorbox1: rgb(44,52,67);
$colorbox2: rgb(53,78,81);
$colorbox3: rgb(47,98,81);
$colorwhite: rgb(235,231,214);

$colorred: rgb(255,94,126);
$colororange: coral;
$coloryellow: orange;
$colorgreen: rgb(127,217,68);
$colorblue: rgb(77, 198, 255);
$colorpurple: plum;

// SCSS FUNCTION TO TOGGLE BACKGROUND COLORS ON OR OFF (I'M A GENIUS) //////////////////////////////////////////
// $colortoggle: true;
$colortoggle: false;

@mixin replace-bgcolor($localcolor, $colortoggle) {
  @if $colortoggle {
    background-color: $localcolor; // use given color when toggle is on
  } @else {
    background-color: transparent; // default color when toggle is off
  }
}

// FONTS /////////////////////////////////////////////////////////////////////////////
@import url('https://fonts.googleapis.com/css2?family=Slabo+13px&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Anonymous+Pro&display=swap');
@font-face { // set custom font
  font-family: myfont;
  src: url("/assets/fonts/fullfont.ttf"); // requires leading /, does not accept liquid site.baseurl
}

// MAIN CONTAINERS /////////////////////////////////////////////////////////////////////////////
html {
  background-color: turquoise; // color behind desktop scrollbar when body uses background-color
  height: 100%; // full screen, base for other adjustments including background
  scroll-behavior: smooth; // for jumping between anchors (must be in html section)
}
body { // put overall styles here
  cursor: url("/assets/images/cursor.png"), default;
  // background-color: $colorbg;
  background: linear-gradient(0deg, rgba(208,118,0,1) 0%, rgba(172,172,104,1) 13%, rgba(128,180,115,1) 23%, rgba(22,166,145,1) 32%, rgba(0,126,206,1) 47%, rgba(58,78,159,1) 100%);
  // background-image: url("/assets/images/tilenight.png");
  color: $colorwhite;
  font-family: 'Anonymous Pro', monospace;
  font-size: 118%; // sets base size for em to use
  margin: 0; // full screen
  min-height: 100%; // full screen
  overflow-y: scroll; // vertical scrollbar always shown
  overflow-wrap: anywhere; // long words will break to next line
  display: flex; // enable flex buffers on left and right of container
  flex-direction: row;
}
div.buffer { // flex spacing on left and right of container
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
}
div.container { // contains all layout elements
  margin: $gapheight 0;
  flex-basis: 800px; // initial length
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
}
div.flex {
  display: flex;
  flex-direction: row;
}
div.centered { // to contain images etc.
  margin: calc(#{$elementmargin} / 2) 0 0 0;
  text-align: center;
}
div { // markdown does not generate divs as far as i can tell

}
main { // main layout element, contains page content in indexmain (and indexside)
  background-color: $colorbox1;
  max-width: 100%;
  margin-top: $gapheight;
  padding: $boxpadding;
  text-align: left;
  // br {display: none;} // for {{ content | newline_to_br }}
  // p br {display: inline;}
  // can't remove margin-top from first children or else it affects everything
  box-shadow: calc(#{$gapheight} / 3) calc(#{$gapheight} / 3) black;
}
div.indexmain { // main content
  order: 1;
  margin: 0;
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
}
aside.indexside { // side content (index only), same properties as wiki infobox except it doesn't change to order: 1; (element properties apply to things outside of iframe)
  background-color: $colorbox2;
  // padding 0 for iframe version, calc(#{$boxpadding} / 2) for html version
  padding: calc(#{$boxpadding} / 2);
  margin: 0 0 0 $boxpadding; // layout spacing, so keep as $boxpadding
  text-align: center;
  order: 2;
  flex-basis: 250px; // initial length (width)
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
  align-self: flex-start; // align to top of container (default is stretch)
  h3:first-child, p:first-child { // whichever is first, remove the top margin (, = or)
    margin-top: 0;
    // background-color: red;
  }
}
div.shortbox { // for update log, same padding as wikibox, include markdown="1"
  background-color: $colorbg;
  max-height: 8em; // changes with font-size defined in body
  overflow-y: scroll; // vertical scrollbar always shown
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargin} / 2) 0 0 0;
  h4, ul, li {
    margin: 0;
  }
  hr {
    margin: calc(#{$elementmargin} / 2) auto;
  }
}
div.directory { // same padding as wikibox
  background-color: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargin} / 2) 0 0 0;
  h4 {
    margin-top: 0;
  }
  ul {
    margin: 0;
    li {
      margin: 0;
    }
  }
}
div.dialoguebox { // same padding as wikibox
  background-color: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargin} / 4) 0 0 0;
  img {
    height: 2.5em;
  }
  p {
    margin: 0 0 0 calc(#{$elementmargin} / 4); // for some reason without this, flexitem p will be vertically aligned to middle
    // align-self: flex-start; // align to top of container (default is stretch)
  }
  div.dialogueflex { // for img and p
    // background-color: navy;
    display: flex;
    flex-direction: row;
    margin: calc(#{$elementmargin} / 4) 0 0 0;
  }
  div.dialogueflex:first-child {
    margin-top: 0;
  }
}
div.iframecontainer { // for normal iframes
  // background-color: yellow;
  position: relative; // must be relative for iframe absolute position to work
  overflow: hidden;
  width: 100%; // full width of container, height is 0
  padding-top: 56.25%; // 16:9 ratio. 75%; // padding creates the height, 4:3 aspect ratio (% is based on width of the containing element)
  margin: calc(#{$elementmargin} / 2) auto 0 auto;
}
div.iframecontainersidebar { // for index sidebar
  // background-color: yellow;
  position: relative; // must be relative for iframe absolute position to work
  overflow: hidden;
  width: 100%; // full width of container, height is 0
  padding-top: 400%; // padding creates the height, 4:3 aspect ratio (% is based on width of the containing element)
  margin: 0;
}

// MAIN CONTAINED ELEMENTS /////////////////////////////////////////////////////////////////////////////
h1 {
  @include replace-bgcolor($colorbox3, $colortoggle);
  color: $coloryellow;
  font-family: myfont;
  font-size: 2.2em;
  text-align: center;
  // display: inline-block;
  margin: 0 0 calc(#{$elementmargin} / 2) 0;
  // padding: calc(#{$elementmargin} / 4) $elementmargin calc(#{$elementmargin} / 4) $elementmargin;
  padding: 0;
}
h2 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colororange;
  font-size: 1.6em;
  // margin: calc(#{$elementmargin} / 1) 0;
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
h3 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colorblue;
  font-size: 1.3em;
  // margin: calc(#{$elementmargin} / 1) 0 calc(#{$elementmargin} / 4) 0;
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
h4, h5, h6 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colorpurple;
  font-size: 1.15em;
  // margin: calc(#{$elementmargin} / 1) 0 calc(#{$elementmargin} / 4) 0;
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
p { // markdown turns lines (including images) into p
  @include replace-bgcolor($colorbox2, $colortoggle);
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
a {
  @include replace-bgcolor($colorbg, $colortoggle);
  cursor: url("/assets/images/cursor.png"), default;
  color: $colorgreen;
  text-decoration: none;
  // margin: calc(#{$elementmargin} / 2) 0 0 0; // BREAKS SKIP TO CONTENT BUTTON
}
a:link { // :link = pseudoclass unvisited
 color: $colorgreen;
}
a:visited { // :visited = pseudoclass visited
 color: $colorgreen;
}
a:hover { // :hover = pseudoclass hovered
 color: $colorred;
}
a:active { // :active = pseudoclass being clicked
 color: $coloryellow;
}
span.spoilered {
  background-color: $colorbox3;
  color: transparent;
}
span.spoilered:hover {
  background-color: transparent;
  color: inherit;
  transition: 0.2s;
}
img {
  margin: 0;
  vertical-align: bottom; // displays as inline-block by default which creates The Gap
  max-width: 100%;
  // object-fit: contain;
}
// img:hover {
//   transform: scale(1.5);
//   // transform: rotate(10deg);
//   transition: transform 0.1s;
// }
ul { // for markdown again
  margin: calc(#{$elementmargin} / 2) 0 0 0;
  li {
    margin: calc(#{$elementmargin} / 4) 0 0 0; // just for normal li's, no effect on listing template due to large h3 margin
    p {
      margin: 0;
      // display: inline-block; // BREAKS EMPTY LISTING DESCRIPTIONS
    }
  }
}
hr { // divider
  width: 80%;
  border: 1.5px solid $colorblue;
  // border-radius: 20px;
  margin: calc(#{$elementmargin} / 1) auto;
}
audio {
  // cursor: url("/assets/images/cursor.png"), default;
  vertical-align: bottom; // has gap like img, audio player displays as inline by default
  max-width: 100%;
  border-radius: 100px;
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
video {
  max-width: 100%;
  margin: calc(#{$elementmargin} / 2) 0 0 0;
}
iframe { // overlaps the full area of iframe container
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  // cursor: url("/assets/images/cursor.png"), default;
  // display: inline-block;
  // vertical-align: bottom; // has gap like img, iframe displays as inline by default ("inline frame")
  border: none;
}
code { // for code, some people wrap <pre> around <code>
  background-color: teal;
  color: white;
  display: inline; // default
  max-width: 100%;
  // width: fit-content;
  word-wrap: break-word;
  // overflow: auto;
  // overflow-x: scroll;
  // padding: calc(#{$elementmargin} / 2);
  // margin: calc(#{$elementmargin} / 2) 0 0 0;
}
.borderimg {
  border: 10px solid transparent;
  padding: $boxpadding;
  border-image: url("/assets/images/tilenight.png") 20 round; // or stretch. # = how many across
}

// HEADER, FOOTER, NAVIGATION /////////////////////////////////////////////////////////////////////////////
header {
  background-color: $colorbox1;
  max-width: 100%;
  height: 100px;
  text-align: center;
  margin: 0;
  box-shadow: calc(#{$gapheight} / 3) calc(#{$gapheight} / 3) black;
  img { // needs adjustment
    max-height: 100%;
    max-width: 50%;
    // display: block; // link takes up full image size
    // margin: auto; // center
  }
  .skip-to-content-button {
    background-color: $colorbox1;
    position: absolute;
    top: 0;
    left: 50%;
    transform: translate(-50%, -100%); // x axis, y axis (compensate for width and hide offscreen)
    transition: transform 0.2s;
  }
  .skip-to-content-button:focus { // when selected by keyboard users/screen readers
    transform: translate(-50%, 0%);
  }
}
footer {
  background-color: $colorbox1;
  max-width: 100%;
  text-align: center;
  margin-top: $gapheight;
  box-shadow: calc(#{$gapheight} / 3) calc(#{$gapheight} / 3) black;
}
nav { // horizontal navbar
  background-color: $colorbox2;
  font-size: 1.3em;
  max-width: 100%;
  margin-top: $gapheight;
  text-align: center;
  padding: calc(#{$boxpadding} / 2);
  box-shadow: calc(#{$gapheight} / 3) calc(#{$gapheight} / 3) black;
  img {
    height: 1em;
  }
  a.current { // "current" class for highlighting navigation
      color: $colorwhite;
  }
  a:link:not(.current) { // :link = pseudoclass unvisited
   color: $colorpurple;
  }
  a:visited:not(.current) { // :visited = pseudoclass visited
   color: $colorpurple;
  }
  a:hover:not(.current) { // :hover = pseudoclass hovered
   color: $coloryellow;
  }
  a:active:not(.current) { // :active = pseudoclass being clicked
   color: $colorred;
  }
}

// WIKIPAGE ELEMENTS /////////////////////////////////////////////////////////////////////////////
.wikibody {
  margin: 0;
  order: 1;
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
  h2:first-child, p:first-child { // whichever is first, remove the top margin (, = or)
    margin-top: 0;
    // background-color: red;
  }
}
aside.infobox { // wiki info box
  background-color: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: 0 0 0 $boxpadding; // layout spacing, so keep as $boxpadding
  text-align: center; // center small image
  order: 2;
  flex-basis: 300px; // initial length (width)
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
  align-self: flex-start; // align to top of container (default is stretch)
  h2 { // can't do a general :first-child, it selects the entry keys etc.
    color: $colorred;
    margin: 0;
  }
  img {
    // max-width: 100%; // now under normal img
    margin: calc(#{$elementmargin} / 4) 0 0 0;
  }
  section {
    margin: 0;
  }
  .category { // category label
    background-color: $colorbox3;
    font-weight: bold;
    color: $coloryellow;
    margin: calc(#{$elementmargin} / 4) 0 0 0;
  }
  .entry{ // entry
    display: flex;
    text-align: left;
    margin: 0; // taken care of by <p> margin-top
    p {
      margin: calc(#{$elementmargin} / 4) 0 0 0;
    }
  }
  .key {
    @include replace-bgcolor($colorbg, $colortoggle);
    color: $colorblue;
    font-weight: bold;
    width: 40%;
  }
  .value {
    @include replace-bgcolor($colorbg, $colortoggle);
    width: 60%;
    // background-color: navy;
    padding: 0 0 0 calc(#{$elementmargin} / 4); // in addition to width. margin doesn't work due to width percentages
  }
}

// GALLERY ELEMENTS /////////////////////////////////////////////////////////////////////////////
// old responsive version
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0;
  max-width: 100%;
}
.column { // 4 columns
  flex: 25%;
  max-width: 25%;
  margin: 0;
  img {
    margin-bottom: 0;
    vertical-align: middle;
    width: 100%;
    // max-width: 100%;
  }
}

// new flex version
.gallery {
  display: flex;
  flex-wrap: wrap;
}
.galleryitem { // container for picture, overlay, and text
  position: relative;
  width: 50%;
}
.gallerypic { // picture
  display: block;
  width: 100%;
  align-self: center;
}
.galleryoverlay { // overlay
  background-color: rgba(0,0,0,0.5);
  opacity: 0;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
}
.galleryitem:hover .galleryoverlay { // when item is hovered, change these overlay settings
  opacity: 1;
}
.gallerytext { // overlay text
  position: absolute;
  top: 50%; // center
  left: 50%;
  transform: translate(-50%, -50%); // compensate for element width/height
  -webkit-transform: translate(-50%, -50%); // chrome, safari, etc.
  -ms-transform: translate(-50%, -50%); // internet explorer
  text-align: center;
  width: 80%;
}

// RESPONSIVE SIDENAV /////////////////////////////////////////////////////////////////////////////

// @media screen and (max-width: 900px) { // medium screen
//   .column { // gallery = 2 columns
//   flex: 50%;
//   max-width: 50%;
//   }
// }

@media screen and (max-width: 700px) { // narrow screen
  // MAIN ////////////////////////////////////////////////////////////////
  body {
    font-size: 140%; // sets base size for em to use
  }
  h1 {
    font-size: 1.7em; // slightly smaller than it would be otherwise
  }
  h2 {
    font-size: 1.3em;
  }
  h3 {
    font-size: 1.1em;
  }
  h4, h5, h6 {
    font-size: 1em;
  }
  ul { // for markdown again
    padding: 0 0 0 25px; // normally 40px
  }
  nav { // horizontal navbar
    font-size: 1.2em;
  }
  div.buffer { // remove buffers
    display: none;
  }
  div.container { // contains all layout elements
    width: 100%;
  }
  div.flex {
    flex-direction: column;
  }
  div.indexmain { // index main content
    max-width: 100%;
    margin: 0;
  }
  aside.indexside { // index side content, same properties as wiki infobox
    max-width: 100%;
    margin: $boxpadding 0 0 0; // layout spacing, so keep as $boxpadding
    flex-basis: 0; // initial length (height)
    align-self: stretch; // default is stretch, but without this it shrinks, maybe because max-width != width
  }
  div.iframecontainersidebar {
    padding-top: 100%; // padding creates the height, 4:3 aspect ratio (% is based on width of the containing element) (includes scrollbar)
  }
  // WIKI ////////////////////////////////////////////////////////////////
  .wikibody {
    order: 2;
    max-width: 100%;
    margin: $boxpadding 0 0 0; // layout spacing, so keep as $boxpadding
  }
  aside.infobox { // wiki info box
    order: 1;
    max-width: 100%;
    margin: 0;
    flex-basis: 0; // initial length (height)
    align-self: stretch; // default is stretch, but without this it shrinks, maybe because max-width != width
  }
  // GALLERY ////////////////////////////////////////////////////////////////
  .column { // gallery = 2 columns
    flex: 50%;
    max-width: 50%;
    // flex: 100%; // 1 column
    // max-width: 100%;
  }
  .galleryitem { // container for picture, overlay, and text
    width: 100%;
  }
}
