// sass that will be converted/imported into the built site's CSS hub styles.scss

// ELEMENT STYLES

// MAIN CONTAINERS /////////////////////////////////////////////////////////////////////////////
html {
  background: $colorbg; // color sometimes shows behind desktop scrollbar
  height: 100%; // full screen, base for other adjustments including background
  scroll-behavior: smooth; // for jumping between anchors (must be in html section)
}
body { // put overall styles here (gradients count as background-image)
  cursor: url("/assets/images/cursor.png"), default;
  // backgrounds controlled by default layout/page.background/data.backgrounds presets
  // background: $colorbg;
  // background: url("/assets/images/tilenight.png");
  // background: linear-gradient(0deg, rgba(215,128,61,1) 0%, rgba(172,172,104,1) 13%, rgba(128,180,115,1) 23%, rgba(22,166,145,1) 41%, rgba(0,126,206,1) 62%, rgba(89,61,163,1) 100%);
  color: $colorwhite;
  font-family: 'Anonymous Pro', monospace;
  font-size: 118%; // sets base size for em to use
  margin: 0; // full screen
  min-height: 100%; // full screen
  overflow-y: scroll; // vertical scrollbar always shown
  overflow-wrap: anywhere; // long words will break to next line
  display: flex; // enable flex buffers on left and right of container
  flex-direction: row;
}
div.buffer { // flex spacing on left and right of container
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
}
div.container { // contains all layout elements
  margin: $gapheight 0;
  flex-basis: 800px; // initial length
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
}
div.flex {
  display: flex;
  flex-direction: row;
}
div.flexcentered { // use in conjunction with normal .flex (flex flexcentered)
  justify-content: center;
  align-items: center;
}
div.centered { // for small images etc. -- "photogallery" has 100% width and no height cap
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
  text-align: center;
  img {
    max-height: 10em;
  }
}
div { // markdown does not generate divs as far as i can tell, this is for photogalleries etc.
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
main { // main layout element, contains page content in indexmain (and indexside)
  background: $colorbox1;
  max-width: 100%;
  margin-top: $gapheight;
  padding: $boxpadding;
  text-align: left;
  // br {display: none;} // for {{ content | newline_to_br }}
  // p br {display: inline;}
  // can't remove margin-top from first children or else it affects everything
  box-shadow: calc(#{$gapheight} / 2) calc(#{$gapheight} / 2) black;
}
div.indexmain { // main content
  order: 1;
  margin: 0;
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
}
aside.indexside { // side content (index only), same properties as wiki infobox except it doesn't change to order: 1; (element properties apply to things outside of iframe)
  background: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: 0 0 0 $boxpadding; // layout spacing, so keep as $boxpadding
  text-align: center;
  order: 2;
  flex-basis: 250px; // initial length (width)
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
  align-self: flex-start; // align to top of container (default is stretch)
  h3:first-child, p:first-child { // whichever is first, remove the top margin (, = or)
    margin-top: 0;
    // background: red;
  }
}
div.shortbox { // for update log, same padding as wikibox, include markdown="1"
  background: $colorbg;
  max-height: 8em; // changes with font-size defined in body
  overflow-y: scroll; // vertical scrollbar always shown
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
  h4, ul, ol, li {
    margin: 0;
  }
  hr {
    margin: calc(#{$elementmargintb} / 2) auto;
  }
}
div.directory { // same padding as wikibox
  background: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
  h4 {
    margin-top: 0;
  }
  ul, ol {
    margin: 0;
    li {
      margin: 0;
    }
  }
}
div.dialoguebox { // same padding as wikibox
  background: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: calc(#{$elementmargintb} / 4) 0 0 0;
  img {
  // define height inline, since this is used for both wikipage-listing and actual dialogueboxes
  aspect-ratio: 1; // square, great for responsive/flex layouts which can mess up fixed width/height
  object-fit: cover; // crop image to fill area
  }
  div.dialogueflex { // for img and p
    // background: navy;
    display: flex;
    flex-direction: row;
    margin: calc(#{$elementmargintb} / 4) 0 0 0;
    div {
      margin: 0 0 0 0.5em;
      p {
        margin: 0;
      }
    }
  }
  div.dialogueflex:first-child {
    margin-top: 0;
  }
}
div.iframecontainer { // for normal iframes
  background: darkslateblue; // for transparent vid element on mobile?
  position: relative; // must be relative for iframe absolute position to work
  overflow: hidden;
  width: 100%; // full width of container, height is 0
  padding-top: 56.25%; // 16:9 ratio. 75%; // padding creates the height, 4:3 aspect ratio (% is based on width of the containing element)
  margin: calc(#{$elementmargintb} / 2) auto 0 auto;
}

// MAIN CONTAINED ELEMENTS /////////////////////////////////////////////////////////////////////////////
h1 {
  @include replace-bgcolor($colorbox3, $colortoggle);
  color: $coloryellow;
  font-family: myfont;
  font-size: 2.2em;
  text-align: center;
  // display: inline-block;
  margin: 0 0 calc(#{$elementmargintb} / 1) 0;
  padding: 0;
}
h2 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colororange;
  font-size: 1.6em;
  // margin: calc(#{$elementmargintb} / 1) 0;
  margin: calc(#{$elementmargintb} / 1) 0 0 0;
}
h3 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colorblue;
  font-size: 1.3em;
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
h4, h5, h6 {
  @include replace-bgcolor($colorbg, $colortoggle);
  color: $colorpurple;
  font-size: 1.15em;
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
p { // markdown turns lines (including images) into p
  @include replace-bgcolor($colorbox2, $colortoggle);
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
p, li { // line height of normal text
  line-height: $lineheight;
}
a {
  @include replace-bgcolor($colorbg, $colortoggle);
  cursor: url("/assets/images/cursor.png"), default;
  color: $colorgreen;
  text-decoration: none;
}
a:link { // :link = pseudoclass unvisited
 color: $colorgreen;
}
a:visited { // :visited = pseudoclass visited
 color: $colorgreen;
}
a:hover { // :hover = pseudoclass hovered
 color: $colorred;
}
a:active { // :active = pseudoclass being clicked
 color: $coloryellow;
}
span.spoilered {
  background: $colorbox3;
  color: transparent;
}
span.spoilered:hover {
  background: transparent;
  color: inherit;
  transition: 0.2s;
}
img {
  margin: 0;
  vertical-align: bottom; // displays as inline-block by default which creates The Gap
  max-width: 100%;
  max-height: 100%;
  // object-fit: contain;
}
// img:hover {
//   transform: scale(1.5);
//   // transform: rotate(10deg);
//   transition: transform 0.1s;
// }
.emoji { // for both img and span
  height: $lineheight;
  img {
    height: $lineheight;
  }
}
.dimmed { // for dimming white images
  filter: brightness(90%);
}
ul, ol { // for markdown again
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
  padding: 0 0 0 2em; // normally 40px
  li {
    @include replace-bgcolor($colorbox2, $colortoggle);
    margin: calc(#{$elementmargintb} / 4) 0 0 0;
    ul, ol { // nested markdown lists create a new ul inside the previous li
      margin: 0;
      padding: 0 0 0 1.6em; // normally 40px
      li { // just for colortoggle visibility
        @include replace-bgcolor($colorbox3, $colortoggle);
      }
    }
    p {
      margin: 0;
      // display: inline-block; // BREAKS EMPTY LISTING DESCRIPTIONS
    }
  }
}
ul.listdefault, ol.listdefault { // for demonstration in sitefeatures
  ::marker {
    content: normal;
  }
}
ul { // unordered list marker styling
  ::marker { // 1st+ level ul
    // content: "â€¢  "; // customized default bullet
    // content: "ðŸŸŠ "; // custom bullet
    content: "*  "; // custom bullet
    color: $colorpurple;
  }
  ul {
    ::marker { // 2nd+ level ul
      content: "~  "; // custom bullet
    }
  }
}
ol { // ordered list marker styling
  ::marker { // 1st+ level ol
     content: counter(list-item)") ";
     color: $colorpurple;
  }
  ul {
    ::marker { // 2nd+ level ul
      content: "~  ";
    }
    ol {
      ::marker { // 3rd+ level ol
         content: counter(list-item)") ";
      }
    }
  }
}
sup { // superscript
  color: $coloryellow;
  vertical-align: top; // top and bottom both work by bringing it to middle, super/sub/middle/etc. cause offset
  position: relative; // allow positioning
  bottom: 0.5em; // push up from the bottom
}
hr { // divider
  width: 80%;
  border: 1.5px solid $colorblue;
  // border-radius: 20px;
  margin: calc(#{$elementmargintb} / 1) auto;
}
audio {
  // cursor: url("/assets/images/cursor.png"), default;
  vertical-align: bottom; // has gap like img, audio player displays as inline by default
  max-width: 100%;
  border-radius: 100px;
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
video {
  max-width: 100%;
  margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
iframe { // overlaps the full area of iframe container
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  // cursor: url("/assets/images/cursor.png"), default;
  // display: inline-block;
  // vertical-align: bottom; // has gap like img, iframe displays as inline by default ("inline frame")
  border: none;
}
code { // for code, some people wrap <pre> around <code>
  // i think the "preserve formatting" and "contain and add scrollbar" are conflicting for code blocks
  background: black;
  color: $colorblue;
  font-family: 'Anonymous Pro', monospace;
  display: inline; // default
  // display: inline-block; // for code block
  // max-width: 100%;
  white-space: break-spaces; // break lines as necessary, preserve whitespace even at end of line
  // width: fit-content;
  // word-wrap: break-word;
  // overflow: auto;
  // overflow-x: scroll;
  padding: 0 0.2em;
  // margin: calc(#{$elementmargintb} / 2) 0 0 0;
}
.borderimg {
  border: 10px solid transparent;
  padding: $boxpadding;
  border-image: url("/assets/images/tilenight.png") 20 round; // or stretch. # = how many across
}

// HEADER, FOOTER, NAVIGATION /////////////////////////////////////////////////////////////////////////////
header {
  // background: $colorbox1;
  max-width: 100%;
  height: 2em;
  text-align: center;
  margin: 0;
  // box-shadow: calc(#{$gapheight} / 3) calc(#{$gapheight} / 3) black;
  img { // needs adjustment
    // height: 100%;
    // filter: drop-shadow(calc(#{$gapheight} / 8) calc(#{$gapheight} / 8) 0px black);
    // display: block; // link takes up full image size
    // margin: auto; // center
  }
  .skip-to-content-button {
    background: $colorbox1;
    position: absolute;
    top: 0;
    left: 50%;
    transform: translate(-50%, -100%); // x axis, y axis (compensate for width and hide offscreen)
    transition: transform 0.2s;
  }
  .skip-to-content-button:focus { // when selected by keyboard users/screen readers
    transform: translate(-50%, 0%);
  }
}
footer {
  // background: $colorbox1;
  max-width: 100%;
  height: 2em;
  text-align: center;
  margin-top: $gapheight;
  // box-shadow: calc(#{$gapheight} / 2) calc(#{$gapheight} / 2) black;
  img {
    // height: 100%;
  }
}
nav { // horizontal navbar
  background: $colorbox2;
  font-size: 1.2em;
  max-width: 100%;
  margin-top: $gapheight;
  text-align: center;
  padding: calc(#{$boxpadding} / 2);
  box-shadow: calc(#{$gapheight} / 2) calc(#{$gapheight} / 2) black;
  img {
    height: 1em;
  }
  a.current { // "current" class for highlighting navigation
      color: $colorwhite;
  }
  a:link:not(.current) { // :link = pseudoclass unvisited
   color: $colorpurple;
  }
  a:visited:not(.current) { // :visited = pseudoclass visited
   color: $colorpurple;
  }
  a:hover:not(.current) { // :hover = pseudoclass hovered
   color: $coloryellow;
  }
  a:active:not(.current) { // :active = pseudoclass being clicked
   color: $colorred;
  }
}

// WIKIPAGE ELEMENTS /////////////////////////////////////////////////////////////////////////////
.wikibody {
  margin: 0;
  order: 1;
  flex-basis: 0; // initial length
  flex-shrink: 0; // does not shrink
  flex-grow: 1; // does grow
  h2:first-child, p:first-child { // whichever is first, remove the top margin (, = or)
    margin-top: 0;
    // background: red;
  }
}
aside.infobox { // wiki info box
  background: $colorbox2;
  padding: calc(#{$boxpadding} / 2);
  margin: 0 0 0 $boxpadding; // layout spacing, so keep as $boxpadding
  text-align: center; // center small image
  order: 2;
  flex-basis: 300px; // initial length (width)
  flex-shrink: 1; // does shrink
  flex-grow: 0; // does not grow
  align-self: flex-start; // align to top of container (default is stretch)
  h3 { // can't do a general :first-child, it selects the entry keys etc.
    color: $colorred;
    margin: 0;
  }
  img {
    // max-width: 100%; // now under normal img
    margin: calc(#{$elementmargintb} / 4) 0 0 0;
  }
  section {
    margin: 0;
  }
  .category { // category label
    background: $colorbox3;
    font-weight: bold;
    color: $coloryellow;
    margin: calc(#{$elementmargintb} / 4) 0 0 0;
  }
  .entry{ // entry contains key and value
    display: flex;
    text-align: left;
    margin: 0; // taken care of by <p> margin-top
    p {
      margin: calc(#{$elementmargintb} / 4) 0 0 0;
      line-height: normal;
    }
  }
  .key {
    @include replace-bgcolor($colorbg, $colortoggle);
    color: $colorblue;
    font-weight: bold;
    width: 40%;
  }
  .value {
    @include replace-bgcolor($colorbg, $colortoggle);
    width: 60%;
    // background: navy;
    padding: 0 0 0 0.3em; // detracts from both key and value width. margin doesn't work due to width percentages
  }
}

// GALLERY ELEMENTS /////////////////////////////////////////////////////////////////////////////
// basic gallery
div.photogallery { //  for full-width images -- "centered" has height cap for small images
  img {
    width: 100%;
  }
}

// old responsive version
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0;
  max-width: 100%;
}
.column { // 4 columns
  flex: 25%;
  max-width: 25%;
  margin: 0;
  img {
    margin-bottom: 0;
    vertical-align: middle;
    width: 100%;
    // max-width: 100%;
  }
}

// new flex version
.gallery {
  display: flex;
  flex-wrap: wrap;
}
.galleryitem { // container for picture, overlay, and text
  position: relative;
  width: 50%;
}
.gallerypic { // picture
  display: block;
  width: 100%;
  align-self: center;
}
.galleryoverlay { // overlay
  background: rgba(0,0,0,0.5);
  opacity: 0;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
}
.galleryitem:hover .galleryoverlay { // when item is hovered, change these overlay settings
  opacity: 1;
}
.gallerytext { // overlay text
  position: absolute;
  top: 50%; // center
  left: 50%;
  transform: translate(-50%, -50%); // compensate for element width/height
  -webkit-transform: translate(-50%, -50%); // chrome, safari, etc.
  -ms-transform: translate(-50%, -50%); // internet explorer
  text-align: center;
  width: 80%;
}
